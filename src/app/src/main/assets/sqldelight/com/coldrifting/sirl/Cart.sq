import com.coldrifting.sirl.data.objects.Amount;
import kotlin.Boolean;
import kotlin.Int;

CREATE TABLE CartHeaders (
    headerId INTEGER AS Int NOT NULL PRIMARY KEY,
    headerName TEXT NOT NULL,
    headerExpanded INTEGER AS Boolean NOT NULL DEFAULT 1
);

CREATE TABLE CartItems (
    cartItemId INTEGER AS Int NOT NULL PRIMARY KEY,
    headerId INTEGER AS Int NOT NULL,
    cartItemName TEXT NOT NULL,
    cartItemDetails TEXT NOT NULL,
    cartItemChecked INTEGER AS Boolean NOT NULL DEFAULT 0,
    FOREIGN KEY (headerId) REFERENCES CartHeaders(headerId)
);

CREATE TABLE CartItemsSelected (
    itemId INTEGER AS Int NOT NULL PRIMARY KEY,
    amount TEXT AS Amount NOT NULL,
    FOREIGN KEY (itemId) REFERENCES Items(itemId)
);

insertCartHeader:
INSERT INTO CartHeaders (headerId, headerName)
VALUES (?, ?);

insertCartItem:
INSERT INTO CartItems (cartItemId, headerId, cartItemName, cartItemDetails)
VALUES (?, ?, ?, ?);

getCartList:
SELECT
CartHeaders.headerId,
CartHeaders.headerName,
CartHeaders.headerExpanded,
CartItems.cartItemId,
CartItems.cartItemName,
CartItems.cartItemDetails,
CartItems.cartItemChecked
FROM CartHeaders
NATURAL JOIN CartItems;

getCartItemChecked:
SELECT cartItemChecked FROM CartItems
WHERE cartItemId = ?;

toggleCartItemChecked:
UPDATE CartItems
SET cartItemChecked = ?
WHERE cartItemId = ?;

getCartHeaderExpanded:
SELECT headerExpanded FROM CartHeaders
WHERE headerId = ?;

toggleCartHeaderExpanded:
UPDATE CartHeaders
SET headerExpanded = ?
WHERE headerId = ?;

getItemsWithUnknownLocation:
SELECT cartItemName
FROM CartItems
WHERE headerId = -1;

-- noinspection MissingWhere
clearCartItems:
DELETE FROM CartItems;

-- noinspection MissingWhere
clearCartHeaders:
DELETE FROM CartHeaders;

-- noinspection MissingWhere
clearSelectedCartRecipes:
UPDATE Recipes
SET cartAmount = 0;

-- noinspection MissingWhere
clearSelectedCartItems:
DELETE FROM CartItemsSelected;

getAvailableRecipesForCart:
SELECT Recipes.recipeId, Recipes.recipeName
FROM Recipes
WHERE Recipes.cartAmount = 0
ORDER BY Recipes.recipeName;

addRecipeToCart:
UPDATE Recipes
SET cartAmount = 1
WHERE recipeId = :recipeId;

updateRecipeInCart:
UPDATE Recipes
SET cartAmount = :newAmount
WHERE recipeId = :recipeId;

removeRecipeFromCart:
UPDATE Recipes
SET cartAmount = 0
WHERE recipeId = :recipeId;

getSelectedShoppingRecipes:
SELECT Recipes.recipeId, Recipes.recipeName, COALESCE(SUM(Recipes.cartAmount), 1) AS recipeQuantity
FROM Recipes
WHERE Recipes.cartAmount > 0
GROUP BY Recipes.recipeName
ORDER BY Recipes.recipeName;

getAvailableItemsForCart:
SELECT Items.itemId, Items.itemName
FROM Items
WHERE Items.itemId NOT IN (SELECT itemId FROM CartItemsSelected)
ORDER BY Items.itemName;

addItemToCart:
INSERT INTO CartItemsSelected (itemId, amount)
VALUES(?, ?);

updateItemInCart:
UPDATE CartItemsSelected
SET amount = :newAmount
WHERE itemId = :itemId;

removeItemFromCart:
DELETE FROM CartItemsSelected
WHERE itemId = :itemId;

getSelectedShoppingItems:
SELECT Items.itemId, Items.itemName, CartItemsSelected.amount
FROM CartItemsSelected
NATURAL JOIN Items
ORDER BY Items.itemName;

getSelectedShoppingItemsWithAisle:
SELECT
Aisles.aisleId,
Aisles.aisleName,
RecipeEntryItems.itemId,
RecipeEntryItems.itemName,
RecipeEntryItems.amount
FROM (SELECT
        Items.itemId,
        Items.itemName,
        CartItemsSelected.amount
        FROM CartItemsSelected
NATURAL JOIN Items) AS RecipeEntryItems
LEFT JOIN ItemAisles ON RecipeEntryItems.itemId = ItemAisles.itemId AND ItemAisles.storeId = :storeId
LEFT JOIN Aisles USING (aisleId)
ORDER BY Aisles.sortingPrefix,
        CASE WHEN ItemAisles.bay = 'Start' THEN 1
            WHEN ItemAisles.bay = 'Middle' THEN 2
            WHEN ItemAisles.bay = 'End' THEN 3 END ASC,
        RecipeEntryItems.itemName;


getShoppingList:
SELECT
Aisles.aisleId,
Aisles.aisleName,
RecipeEntryItems.itemId,
RecipeEntryItems.itemName,
ItemPreps.prepName,
RecipeEntryItems.amount,
RecipeEntryItems.cartAmount
FROM (SELECT
        Recipes.recipeId,
        Recipes.recipeName,
        Recipes.cartAmount,
        RecipeSections.recipeSectionId,
        RecipeEntries.amount,
        RecipeEntries.itemPrepId,
        Items.itemId,
        Items.itemName
        FROM Recipes
NATURAL JOIN RecipeSections
NATURAL JOIN RecipeEntries
NATURAL JOIN Items) AS RecipeEntryItems
LEFT JOIN ItemAisles ON RecipeEntryItems.itemId = ItemAisles.itemId AND ItemAisles.storeId = :storeId
LEFT JOIN Aisles USING (aisleId)
LEFT JOIN ItemPreps USING (itemPrepId)
WHERE RecipeEntryItems.cartAmount > 0
ORDER BY Aisles.sortingPrefix,
        CASE WHEN ItemAisles.bay = 'Start' THEN 1
            WHEN ItemAisles.bay = 'Middle' THEN 2
            WHEN ItemAisles.bay = 'End' THEN 3 END ASC,
        RecipeEntryItems.itemName,
        ItemPreps.prepName;