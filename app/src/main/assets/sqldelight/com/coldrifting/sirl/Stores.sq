import kotlin.Boolean;
import kotlin.Int;

-- Stores --

CREATE TABLE Stores (
    storeId INTEGER AS Int NOT NULL PRIMARY KEY AUTOINCREMENT,
    storeName TEXT NOT NULL,
    selected INTEGER AS Boolean NOT NULL
);

allStores:
SELECT * FROM Stores
ORDER BY storeName;

insertStore:
INSERT INTO Stores (storeId, storeName, selected)
VALUES (?, ?, ?);

addStore:
INSERT INTO Stores (storeName, selected)
VALUES (?, ?);

renameStore:
UPDATE Stores
SET storeName = ?
WHERE storeId = ?;

deleteStore:
DELETE FROM Stores
WHERE storeId = ?;

selectedStore:
SELECT COALESCE( (SELECT Stores.storeId FROM Stores WHERE Stores.selected = 1 LIMIT 1), 0);

selectStore:
UPDATE Stores
SET selected = :selected
WHERE Stores.storeId = :storeId;

-- Aisles --

CREATE TABLE Aisles (
    aisleId INTEGER AS Int NOT NULL PRIMARY KEY AUTOINCREMENT,
    storeId INTEGER AS Int NOT NULL,
    aisleName TEXT NOT NULL,
    sortingPrefix INTEGER AS Int NOT NULL,
    FOREIGN KEY (storeId) REFERENCES Stores(storeId) ON DELETE CASCADE
);

allAisles:
SELECT * FROM Aisles
ORDER BY sortingPrefix;

allAislesFromStore:
SELECT * FROM Aisles
WHERE Aisles.storeId = ?
ORDER BY sortingPrefix;

insertAisle:
INSERT INTO Aisles (aisleId, storeId, aisleName, sortingPrefix)
VALUES (?, ?, ?, ?);

addAisle:
INSERT INTO Aisles (storeId, aisleName, sortingPrefix)
VALUES (?, ?, ?);

renameAisle:
UPDATE Aisles
SET aisleName = ?
WHERE aisleId = ?;

aisleMaxSortIndex:
SELECT (SELECT MAX(sortingPrefix) FROM Aisles) + 1;

updateAisleSort:
UPDATE Aisles
SET sortingPrefix = ?
WHERE aisleId = ?;

deleteAisle:
DELETE FROM Aisles
WHERE aisleId = ?;